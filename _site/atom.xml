<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Night[9]</title>
 <link href="http://chrislundquist.github.com/atom.xml" rel="self"/>
 <link href="http://chrislundquist.github.com"/>
 <updated>2012-09-16T01:58:11-07:00</updated>
 <id>http://chrislundquist.github.com</id>
 <author>
   <name>Chris Lundquist</name>
   <email>ChrisMLundquist@gmail.com</email>
 </author>

 
 <entry>
   <title>Setting up SSH to a Windows 7 virtual box</title>
   <link href="http://chrislundquist.github.com/2012/09/16/SSH-Windows-7-Virtual-Box"/>
   <updated>2012-09-16T00:00:00-07:00</updated>
   <id>hhttp://chrislundquist.github.com/2012/09/16/SSH-Windows-7-Virtual-Box</id>
   <content type="html">&lt;p&gt;I Learned these first steps from the most reliable source ever. For a step by step video. http://www.youtube.com/watch?v=HoSebbqBQQo&lt;/p&gt;

&lt;p&gt;I found another guide while writing this that explains the second part http://www.howtogeek.com/howto/41560/how-to-get-ssh-command-line-access-to-windows-7-using-cygwin/&lt;/p&gt;

&lt;h1 id='making_the_box'&gt;Making The Box&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Download VirtualBox ( https://www.virtualbox.org/wiki/Downloads )&lt;/li&gt;

&lt;li&gt;Get an ISO of Windows 7 ( http://www.youtube.com/watch?v=HoSebbqBQQo )&lt;/li&gt;

&lt;li&gt;In VirtualBox create a new machine after the Windows 7 Template.&lt;/li&gt;

&lt;li&gt;Use ICH9 and Enable IO APIC, Otherwise the box segfaults on boot.&lt;/li&gt;

&lt;li&gt;Mount the Windows 7 ISO as an IDE DVD drive. It will not detect it as SATA&lt;/li&gt;

&lt;li&gt;Install windows 7&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id='getting_ssh_working'&gt;Getting SSH Working&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Download Cygwin ( http://cygwin.com/install.html )&lt;/li&gt;

&lt;li&gt;Install OpenSSH via Cygwin&lt;/li&gt;

&lt;li&gt;Run ssh-host-configas Adminstrator. This will make a new user account to run SSHd as a windows service.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id='getting_msvc_working'&gt;Getting MSVC working&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Download and install Visual Studio 2010&lt;/li&gt;

&lt;li&gt;Source this shell script in your cygwin .bashrc https://gist.github.com/3717601&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Success&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>an outside perspective on razor</title>
   <link href="http://chrislundquist.github.com/2012/07/05/an-outside-perspective-on-razor"/>
   <updated>2012-07-05T00:00:00-07:00</updated>
   <id>hhttp://chrislundquist.github.com/2012/07/05/an-outside-perspective-on-razor</id>
   <content type="html">&lt;h2 id='caveat'&gt;Caveat&lt;/h2&gt;

&lt;p&gt;I have only spent a week going through this, so I am by no means an expert. Much of this I am piecing together and making educated guesses. If you have corrections, please let me know as I would love to improve my understanding.&lt;/p&gt;

&lt;p&gt;Also note that Razor is a fast moving project and this will be quickly outdated. Think of it as alpha review. I can only hope all my gripes are untrue in six months.&lt;/p&gt;

&lt;h2 id='overview'&gt;Overview&lt;/h2&gt;
&lt;a href='https://github.com/puppetlabs/Razor'&gt; Project Razor &lt;/a&gt;
&lt;p&gt;is a piece of software that aims to simplify bare metal server deployments to bring them up to speed with various virtual server platforms.&lt;/p&gt;

&lt;h2 id='who_is_writing_razor'&gt;Who Is Writing Razor&lt;/h2&gt;

&lt;p&gt;First let me start out saying that people working on razor are really great. They have spent a lot of time working on the project and solving issues. They certainly are responsive and even help when it &lt;a href='https://github.com/puppetlabs/Razor/issues/95'&gt; isn't even their problem&lt;/a&gt; I only wish &lt;a href='https://github.com/benburkert/razor-vagrant-demo/pull/5'&gt;other projects were as responsive&lt;/a&gt; As I understand it EMC and PuppetLabs are the key companies pushing Razor forward&lt;/p&gt;

&lt;h2 id='what_razor_does'&gt;What Razor Does&lt;/h2&gt;

&lt;p&gt;Razor is aimed to take bare metal and load it up with an operating system. It does this based on &amp;#8220;tags&amp;#8221; it generated from rules run over &lt;a href='http://projects.puppetlabs.com/projects/facter'&gt;facter&lt;/a&gt; data After that, razor says it will hand off to a &amp;#8220;broker&amp;#8221;, provisioning tool, such as Puppet or Chef. Currently it only supports Puppet as the project stems from PuppetLabs The internals are pretty complex, and we will take a look at them in a moment.&lt;/p&gt;

&lt;h2 id='why_write_razor'&gt;Why Write Razor&lt;/h2&gt;

&lt;p&gt;If you have ever loaded 20 machines remotely, you know the pain. It really doesn&amp;#8217;t scale. Even if you are using anaconda, PXE, and all that. Often you will have to KVM a machine to load it up. This just won&amp;#8217;t work anymore.&lt;/p&gt;

&lt;h2 id='how_razor_works'&gt;How Razor Works&lt;/h2&gt;

&lt;p&gt;Razor is split up into several pieces called &lt;a href='https://github.com/puppetlabs/Razor/wiki'&gt; slices &lt;/a&gt;. Razor&amp;#8217;s key slices at the moment are: image, model, policy, node, and broker.&lt;/p&gt;

&lt;p&gt;Using these slices it wraps a PXE boot environment with a state machine keyed of mac addresses.&lt;/p&gt;

&lt;p&gt;When a node, server, is brought up and receives a DHCP offer from Razor, Razor will set the next address to Razor&amp;#8217;s tftp server that will load &lt;a href='https://github.com/puppetlabs/Razor/downloads'&gt; microkernel &lt;/a&gt; on to the node / server. This will cause the server to run facter and submit output to Razor, which razor will then register this node and apply any tags. These tags usually show memory, cpu core count, network card count, virtual machine type or hardware vendor. I believe you can even make your own rules to generate tags.&lt;/p&gt;

&lt;h3 id='image'&gt;&lt;em&gt;Image&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;Razor basically keeps an unpacked ISO of whatever distribution(s) you are installing. Currently Razor likes to be in the middle of this, and (in my personal experience) dislikes net booting from remote resources. This is because doing so can easily break Razor&amp;#8217;s callback chain.&lt;/p&gt;

&lt;p&gt;In short, an image is an unpacked ISO, given a UUID and some descriptions.&lt;/p&gt;

&lt;h3 id='model'&gt;&lt;em&gt;Model&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;A model is a shim as far as I can tell that provides a little more metadata on how to deploy an image. For instance is it virtual or physical, and things like that.&lt;/p&gt;

&lt;h3 id='policy'&gt;&lt;em&gt;Policy&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;A policy is how Razor assigns a model to a node from tags. Basically you will say, &amp;#8220;If a node has these tag(s) x,y,z, then use this model&amp;#8221;, Currently I believe it is first match wins.&lt;/p&gt;

&lt;h3 id='node'&gt;&lt;em&gt;Node&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;This is where the state of the server is kept. This will let Razor keep track of if the server. Keyed off mac address, this lets razor know if the host needs to be loaded, and what properties it has.&lt;/p&gt;

&lt;h3 id='broker'&gt;&lt;em&gt;Broker&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;A Broker is something that razor can hand off to like Chef or Puppet. Currently only Puppet is supported.&lt;/p&gt;

&lt;h2 id='why_razor_doesnt_work_for_me'&gt;Why Razor Doesn&amp;#8217;t Work For Me&lt;/h2&gt;

&lt;p&gt;For my use case at &lt;a href='Bluebox.net'&gt;Bluebox. &lt;/a&gt; Razor just don&amp;#8217;t feel like the right tool. It seems like it is trying to solve too many problems that Razor should delegate. Having a complete repository for every OS you might install is hard. Keeping a duplicate of it for Razor, since you might have custom packages in your own, is extra work. Maybe you can add your customized repositories later, but it is still one more bit of duplication.&lt;/p&gt;

&lt;p&gt;Razor naturally is very Puppet centric. I have no problem with Puppet, I just learned Chef first. This was a great opportunity to learn a bit, and puppet has a few attractive features which I will explore. The promise of chef support feels tacked on at the moment.&lt;/p&gt;

&lt;p&gt;Razor also feels like it is scratching an itch I just don&amp;#8217;t have. It has lots of support for the VMware universe that I know almost nothing about. Things like LXC, and XEN have planned support, but Razor doesn&amp;#8217;t seem like it is there yet.&lt;/p&gt;

&lt;p&gt;Some of these things feel like they go against &amp;#8220;Occom&amp;#8217;s Razor&amp;#8221; as was the &lt;a href='http://nickapedia.com/2012/05/21/lex-parsimoniae-cloud-provisioning-with-a-razor/'&gt; stated inspiration &lt;/a&gt; for the name.&lt;/p&gt;

&lt;p&gt;If your goal is &amp;#8220;to be like AWS, but with dedicated hardware&amp;#8221;, then these things are needed. Our goal was a little less ambitious. &amp;#8220;To load hardware, automatically, and intelligently&amp;#8221;. This just means we have to bring them up to an SSHable state.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>everything you need to know to migrate from ree 1.8.7 to 1.9.3</title>
   <link href="http://chrislundquist.github.com/Ruby On Rails/2012/06/25/everything-you-need-to-know-to-migrate-from-ree-187-to-193"/>
   <updated>2012-06-25T00:00:00-07:00</updated>
   <id>hhttp://chrislundquist.github.com/Ruby On Rails/2012/06/25/everything-you-need-to-know-to-migrate-from-ree-187-to-193</id>
   <content type="html">&lt;h1 id='too_long_didnt_read'&gt;Too Long Didn&amp;#8217;t Read&lt;/h1&gt;

&lt;p&gt;Most of your time will be spent updating gems to 1.9 versions then going through and replacing things like String#each with String#each_line&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;YAML use YAML::ENGINE.yamler = &amp;#8216;syck&amp;#8217;&lt;/li&gt;

&lt;li&gt;Use stdlib where possible&lt;/li&gt;

&lt;li&gt;Time#parse&lt;/li&gt;

&lt;li&gt;UTF-8 encode everything&lt;/li&gt;

&lt;li&gt;next instead of return is syntax error now instead of Segfault&lt;/li&gt;

&lt;li&gt;Rspec tests ending in Group&lt;/li&gt;

&lt;li&gt;Nil, True, False classes are frozen, can&amp;#8217;t dup them&lt;/li&gt;

&lt;li&gt;&amp;#8220;when :&amp;#8221;, kill it&lt;/li&gt;

&lt;li&gt;Rails 2.3.14 gotchya with 1.9.3 loading helpers&lt;/li&gt;

&lt;li&gt;Range#include? -&amp;gt; Range#cover?&lt;/li&gt;

&lt;li&gt;String#each -&amp;gt; String#each_line&lt;/li&gt;

&lt;li&gt;Enumerable#choice -&amp;gt; Enumerable#sample&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='marshalling_params_or_bigdecimal_with_yaml'&gt;Marshalling params or BigDecimal with YAML&lt;/h2&gt;

&lt;p&gt;One of the more difficult things to track down was a bug in marshalling using the default serializer, yaml, and its default yamler.&lt;/p&gt;

&lt;p&gt;The problem was that whenever you tried to to_yaml or Marshall#dump you got a big nasty error saying something like&lt;/p&gt;

&lt;p&gt;&amp;#8220;example of BigDecimal wrong number arugments 2 for 0&amp;#8221;&lt;/p&gt;

&lt;p&gt;Here was the fix I implemented in config/boot.rb &lt;pre&gt;
 # FIXME remove the below hack when we at rails 3
 # http://answerpot.com/showthread.php?2494452-Error+With+BigDecimal+To_yaml
 # http://stackoverflow.com/questions/6530412/cant-define-singleton-method-encode-with-for-bigdecimal
  if RUBY_VERSION.to_f == 1.9
    require 'yaml'
    YAML::ENGINE.yamler = 'syck'
    # Set up gems listed in the Gemfile.
    gemfile = File.expand_path('../../Gemfile', __FILE__)
  end
&lt;/pre&gt;&lt;/p&gt;

&lt;h2 id='let_dead_gems_die_use_stdlib'&gt;Let Dead Gems Die, Use Stdlib&lt;/h2&gt;

&lt;p&gt;We were using several gems that were old and designed for 1.8.x For the most part the fixes were going through and removing colons after when statements or adding the &lt;a href='www.example.com'&gt; magic UTF-8 encoding tag&lt;/a&gt;. However, one particularly nasty thing was the &lt;a href='www.example.com'&gt; ruby-aes-optimized&lt;/a&gt;. It broke in 1.9.x because &amp;#8220;string&lt;span&gt;n&lt;/span&gt;&amp;#8221; now returned a character &amp;#8220;A&amp;#8221; instead of the ascii value 65. It was also basically some C example implementation that was regexped into ruby. As such we found out later that it didn&amp;#8217;t quite agree with how OpenSSL did things. After talking about it briefly, we looked at &lt;a href='www.example.com'&gt; ruby-fast-aes &lt;/a&gt;, but saw that it only did weak encryption. We figured the best way to get this done would be to write ruby bindings to OpenSSL&amp;#8217;s implementation. Coincidentally, someone had done just that in the &lt;a href='www.example.com'&gt; Stdlib &lt;/a&gt;.&lt;/p&gt;

&lt;h2 id='time'&gt;Time&amp;#8230;&lt;/h2&gt;

&lt;p&gt;In short&amp;#8230; https://gist.github.com/873699&lt;/p&gt;

&lt;h2 id='systemtimer_its_dead_jim'&gt;SystemTimer, It&amp;#8217;s Dead Jim&lt;/h2&gt;

&lt;p&gt;Because of how 1.8.7 used &lt;a href='www.example.com'&gt;Green threads&lt;/a&gt; you had to use a gem to gem real interrupts. In Ruby 1.9.x the theading model is changed so this is no longer required. You can now use &lt;a href='www.example.com'&gt; Timeout::timout(seconds) &lt;/a&gt;&lt;/p&gt;

&lt;h2 id='ruby_193_and_rails_2314_includes_all_the_helpers'&gt;Ruby 1.9.3 and Rails 2.3.14 includes all the helpers!&lt;/h2&gt;

&lt;p&gt;Another sticking point that almost made us stick with ruby 1.9.2 was that there is an issue with trying to load helpers for every controller when ApplicationController says helpers :all. I poked at it a few times but was focused on the 1.9.2 issues. Fortunately as soon as I was ready with 1.9.2 &lt;a href='www.example.com'&gt;Mr.Arko published just the fix&lt;/a&gt;&lt;/p&gt;

&lt;h2 id='next_instead_of_return_is_syntax_error_now_instead_of_segfault'&gt;next instead of return is syntax error now instead of Segfault&lt;/h2&gt;

&lt;p&gt;Sometimes when refactoring code I have forgotten to remove a next or left in a return. In ree-1.8.7 this would cause a segfault when you reached the line. Now fortunately it will be a syntax error.&lt;/p&gt;

&lt;h2 id='rspec_tests_ending_in_group'&gt;Rspec Tests Ending in Group&lt;/h2&gt;

&lt;p&gt;We had a UserGroup model, so naturally we had user_group_spec.rb. In 1.8.7 this worked just fine. However in 1.9.x it tried to run it as a shared_behavior and blew up with some rather unhelpful stack trace. I ended up needing to look at the rspec source. I renamed the spec from describe UserGroup to describe User and that fixed it. ( I felt dirty so I wrapped it in a context ).I might hunt for a better solution later.&lt;/p&gt;

&lt;h2 id='nil_true_false_classes_are_frozen'&gt;Nil, True, False classes are frozen&lt;/h2&gt;

&lt;p&gt;This will only effect tests for the most part when you try to mock out nil objects. The easy fix is to mock one level lower too. Or create the data in a before / let block depending on what the data is.&lt;/p&gt;

&lt;h2 id='method_changes'&gt;Method changes&lt;/h2&gt;

&lt;p&gt;Range dropped include? for some reason and moved it to covers? it is important not to cast it to an array. Especially with time objects. Otherwise it will do a linear search through a giant array. &lt;em&gt;This change is not backwards compatible, you will have to switch on Ruby 1.9 / Ruby 1.8 and use the correct behavior&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;String#each -&amp;gt; String#each_line. On the plus side this guy is backwards compatible. I would guess the change was made because of the principal of least surprise. One might think String#each would yield characters.&lt;/p&gt;

&lt;p&gt;Enumerable#choice -&amp;gt; Enumerable#sample. Both are only decent names. It returns a random element from the collection. &lt;em&gt;This change is not backwards compatible, you will have to switch on Ruby 1.9 / Ruby 1.8 and use the correct behavior&lt;/em&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Everything You Were Never Told About Billing Code</title>
   <link href="http://chrislundquist.github.com/Development/2012/05/24/everything-you-were-never-told-about-billing-code"/>
   <updated>2012-05-24T00:00:00-07:00</updated>
   <id>hhttp://chrislundquist.github.com/Development/2012/05/24/everything-you-were-never-told-about-billing-code</id>
   <content type="html">&lt;p&gt;Most of these may seem fairly self evident when written here, but they are often easy to overlook when in the middle of coding.&lt;/p&gt;

&lt;p&gt;The most important things about billing code are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Results are reproducible and consistent&lt;/li&gt;

&lt;li&gt;Precision over Accuracy&lt;/li&gt;

&lt;li&gt;Invoices always have sub items.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id='consistency_is_key'&gt;Consistency is key&lt;/h3&gt;

&lt;p&gt;The most common issue I see is having the price of an object change at some point in the future, which in turn causes the amount of every invoice in the past to change with it. Sometimes this happens because of sales or promotions, but usually it goes unnoticed until there is an issue with the purchase, then a nightmare follows when records are misaligned. A wise coworker once told me a great secret to not piss people off. &amp;#8220;Don&amp;#8217;t fuck with people&amp;#8217;s money&amp;#8221;. Words worth their weight in gold so to speak.&lt;/p&gt;

&lt;h3 id='precision_over_accuracy'&gt;Precision over Accuracy&lt;/h3&gt;

&lt;p&gt;Precision means getting the same answer each time, even if it is not quite the right answer. People will not care how you choose to round tax and the like as long as it looks close enough. They will care when you tell them their bill is a slightly different number each time.&lt;/p&gt;

&lt;p&gt;The greatest example I have of this is a particular bit of software known as masteringphysics.com . MasteringPhysics pretends to value precision by telling you to round using significant figures, and nagging you whenever you enter too many digits of precision. Invariably, as soon as you follow what they say the answer was supposed to be for the next question in the series, they give you the helpful, &amp;#8220;Your answer was close, but not quite right, check your rounding&amp;#8221; when you used their supplied answers opposed to your more exact answers.&lt;/p&gt;

&lt;p&gt;At the other end of the spectrum I, having learned this lesson from masteringphysics.com, and with working with an invoice similar to a phone bill decided to add the length of each phone call using millisecond precision and round it at the end to get the most accurate answer. This however lead to problems when the customer decided we were adding a few seconds to their bill since the invoice only displayed length up to the second. So all the few extra milliseconds here and there were not shown on the invoice.&lt;/p&gt;

&lt;p&gt;Worse yet, if you took any subset and added them you would get a different total than displayed on the invoice. Again due to using more precision than shown.&lt;/p&gt;

&lt;h3 id='invoices_always_have_sub_items'&gt;Invoices Always Have Sub Items&lt;/h3&gt;

&lt;p&gt;Your phone bill has records of each call. Your grocery bill has records of each item. I am unable to think of an invoice not in this format. More importantly they never have more than one layer of sub items. People don&amp;#8217;t want to resolve dependency trees. They just want to know what they were billed for and what credits they got.&lt;/p&gt;

&lt;p&gt;The only exception there might be to this rule is the medical industry as there were talks given at RailsConf 2012 by a company that specialized in medical billing. Given that people are willing to pay someone else to bill for their services. It must be really painful to do.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Let's Talk About Data Types</title>
   <link href="http://chrislundquist.github.com/Tutorial/2012/05/21/lets-talk-about-data"/>
   <updated>2012-05-21T00:00:00-07:00</updated>
   <id>hhttp://chrislundquist.github.com/Tutorial/2012/05/21/lets-talk-about-data</id>
   <content type="html">&lt;h1 id='data_types'&gt;Data types&lt;/h1&gt;

&lt;p&gt;let&amp;#8217;s talk about data.&lt;/p&gt;

&lt;p&gt;Most data is really boils down to just a few types. There are strings, integers, and floats for the most part. Strings are, well, a string of characters or letters naturally. Integers are whole numbers. Floats are decimal numbers.&lt;/p&gt;

&lt;h2 id='some_examples_of_strings'&gt;Some examples of strings.&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&amp;#8221;&amp;#8221; an empty string&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&amp;#8221;a&amp;#8221; a simple string&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&amp;#8220;hello world&amp;#8221; my favorite string&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&amp;#8220;\n\t\e\d&amp;#8221; a string of special characters. newline, tab, escape, backspace&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='some_examples_of_integers'&gt;Some examples of integers&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;2 a positive whole number&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;0 zero&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;-5 a negative number&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='some_examples_of_floats'&gt;Some examples of Floats&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;123 some decimal&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;1415927 some of pi&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;-1.0 a negative number that is equal to the integer -1&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id='complex_data_types'&gt;Complex Data Types&lt;/h1&gt;

&lt;p&gt;Sometimes there is a certain type of data we use over and over again. Usually when this happens we make some standard for it. Some examples like this are Timestamps, Regexp, Arrays, Hashes&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Railsconf 2012 Take Away (Day 3)</title>
   <link href="http://chrislundquist.github.com/Railsconf/2012/04/25/Railsconf-2012-Take-Away"/>
   <updated>2012-04-25T00:00:00-07:00</updated>
   <id>hhttp://chrislundquist.github.com/Railsconf/2012/04/25/Railsconf-2012-Take-Away</id>
   <content type="html">&lt;h2 id='rails_the_next_five_years_by_yehuda_katz_from_tilde'&gt;Rails: The Next Five Years by Yehuda Katz from Tilde&lt;/h2&gt;

&lt;p&gt;The talk was focused on rails needs to go in a more JSON direction using serializers and presenters.&lt;/p&gt;

&lt;p&gt;He exemplified a few techniques to make rails work cleanly with ember. He referenced Steven Klabnik&amp;#8217;s talk.&lt;/p&gt;

&lt;p&gt;He now has to convince people why rails is the right choice to do JSON heavy work.&lt;/p&gt;

&lt;h2 id='what_a_long_strange_trip_it_has_been_by_ezra_zygmuntowicz'&gt;What a long Strange Trip it has been by Ezra Zygmuntowicz.&lt;/h2&gt;

&lt;p&gt;Ezra details his history of 10 years working with Rails and Engine Yard. He then announced his new startup and transition to 3d Printing. He hopes to improve the tool chain to work with 3d printers to make it way more awesome.&lt;/p&gt;

&lt;h2 id='lightning_talks'&gt;Lightning Talks&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;One about working asynchronously to be more efficient, E.G. Github&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;One about the interview gem.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Ryan Bigg clarifying good practices for engines.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Yehuda detailing his project about binary gems.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content>
 </entry>
 
 <entry>
   <title>Railsconf 2012 Take Away (Day 2)</title>
   <link href="http://chrislundquist.github.com/Railsconf/2012/04/24/Railsconf-2012-Take-Away"/>
   <updated>2012-04-24T00:00:00-07:00</updated>
   <id>hhttp://chrislundquist.github.com/Railsconf/2012/04/24/Railsconf-2012-Take-Away</id>
   <content type="html">&lt;h2 id='keynote_by_aaron_patterson'&gt;Keynote by Aaron Patterson&lt;/h2&gt;

&lt;p&gt;He said we fail at everything, explained why people are scared of change and &amp;#8220;mature&amp;#8221; programmers have gotten that way for a reason.A Said we need an interface for everything. Most specifically for Queues like Rabbit, Zero, Sidekick, etc.&lt;/p&gt;

&lt;h2 id='taming_the_kraken_by_nathen_harvey_from_customink'&gt;Taming The Kraken by Nathen Harvey from CustomInk&lt;/h2&gt;

&lt;p&gt;They used Vagrant and chef and wrote the contiki project we did for a year.&lt;/p&gt;

&lt;h2 id='sustainable_productivity_with_rails_by_xavier_shay_from_square'&gt;Sustainable Productivity with Rails by Xavier Shay from Square&lt;/h2&gt;

&lt;p&gt;He talked about what I understand hexagonal architecture to be. Things like having one point of external dependency. Using tools like his implementation of Cane and the like to find code smell via scripts and applications.&lt;/p&gt;

&lt;h2 id='lets_make_the_web_faster_by_ilya_grigorik_from_google'&gt;Lets Make the Web Faster by Ilya Grigorik from Google&lt;/h2&gt;

&lt;p&gt;Demoed tools in chrome to see what takes so long with websites.&lt;/p&gt;

&lt;p&gt;The average web page takes 10 seconds to completely load.&lt;/p&gt;

&lt;p&gt;The average web page loads 84 resources.&lt;/p&gt;

&lt;p&gt;Talked about optimizing the rest of the stack, not just that one slow sql query.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Railsconf 2012 Take Away (Day 1)</title>
   <link href="http://chrislundquist.github.com/Railsconf/2012/04/23/Railsconf-2012-Take-Away"/>
   <updated>2012-04-23T00:00:00-07:00</updated>
   <id>hhttp://chrislundquist.github.com/Railsconf/2012/04/23/Railsconf-2012-Take-Away</id>
   <content type="html">&lt;h2 id='dhh_keynote'&gt;DHH keynote&lt;/h2&gt;

&lt;p&gt;DDH warns us about thinking old and being risk adverse.&lt;/p&gt;

&lt;p&gt;says fuck 18 times.&lt;/p&gt;

&lt;p&gt;Humorous and enjoyable talk overall.&lt;/p&gt;

&lt;h2 id='designing_hypermedia_apis_by_steve_klabnik'&gt;Designing HyperMedia APIs by Steve Klabnik&lt;/h2&gt;

&lt;p&gt;Rails REST is not the same as the original white paper REST.&lt;/p&gt;

&lt;p&gt;Use the JSON response to render the GUI.&lt;/p&gt;

&lt;p&gt;Return links in your JSON&lt;/p&gt;

&lt;p&gt;good talk overall. He plays starcraft 2 and watches Day 9&lt;/p&gt;

&lt;h2 id='practical_machine_learning_by_cantino_and_stout'&gt;Practical Machine Learning by Cantino and Stout&lt;/h2&gt;

&lt;p&gt;Overview of machine learning.&lt;/p&gt;

&lt;p&gt;effective techniques overview.&lt;/p&gt;

&lt;p&gt;You could see if people are happy or upset based on emoticons in twitter messages.&lt;/p&gt;

&lt;h2 id='rails_engines_by_andy_maleh_from_groupon'&gt;Rails Engines by Andy Maleh from Groupon&lt;/h2&gt;

&lt;p&gt;In one sentence, use inheritance techniques with engines as you would with models or what not.&lt;/p&gt;

&lt;p&gt;Detailed concrete practice learnings.&lt;/p&gt;

&lt;p&gt;Talk would have been better using the intro of Ryan Bigg&lt;/p&gt;

&lt;h2 id='roomba_on_rails_by_charles_abbot_tail_end'&gt;Roomba on Rails by Charles Abbot (tail end)&lt;/h2&gt;

&lt;p&gt;Played the emperor&amp;#8217;s march via midi on the roomba.&lt;/p&gt;

&lt;h2 id='use_the_source_luke_with_data_sourcing_events_by_keith_gaddis'&gt;Use the Source Luke with Data Sourcing Events by Keith Gaddis&lt;/h2&gt;

&lt;p&gt;Basically he said make your database like Git and store the events that lead to the changes.&lt;/p&gt;

&lt;p&gt;Easier said than done, but it lets you replay events.&lt;/p&gt;

&lt;p&gt;NOTE your actions must be deterministic&lt;/p&gt;

&lt;p&gt;(CL) This is how starcraft 2 does replays. a SQL database of events&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Video Encoding Terminology</title>
   <link href="http://chrislundquist.github.com/Video Encoding/2012/03/05/video-encoding-terminology"/>
   <updated>2012-03-05T00:00:00-08:00</updated>
   <id>hhttp://chrislundquist.github.com/Video Encoding/2012/03/05/video-encoding-terminology</id>
   <content type="html">&lt;p&gt;MB - Macro Block, a group of pixels, often square usually between 16 x 16 and 4 x 4, some encoders allow 8 x 4 and the like.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Leveraging Frameworks: dependent => :destroy</title>
   <link href="http://chrislundquist.github.com/Rails Development/2012/03/05/leveraging-frameworks-dependent--destroy"/>
   <updated>2012-03-05T00:00:00-08:00</updated>
   <id>hhttp://chrislundquist.github.com/Rails Development/2012/03/05/leveraging-frameworks-dependent--destroy</id>
   <content type="html">&lt;p&gt;Maybe you have some code like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;model Foo &amp;lt; ActiveRecord::Base
    has_many :bars
    before_destroy :clean_up_bars

    def clean_up_bars
       self.bars.destroy_all
    end
end&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My main gripe with this, is that Rails provides an awesome way to clean up any thing that doesn&amp;#8217;t make sense without a parent. Fortunately it is even super simple.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;model Foo &amp;lt; ActiveRecord::Base
    has_many :bars
    before_destroy :clean_up_bars, :dependent =&amp;gt; :destroy
end&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will make it so that when your Foo instance is destroyed, it will also destroy each of the bars that belong to that Foo instance.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>March Challenge</title>
   <link href="http://chrislundquist.github.com/Challenges/2012/03/01/march-challenge"/>
   <updated>2012-03-01T00:00:00-08:00</updated>
   <id>hhttp://chrislundquist.github.com/Challenges/2012/03/01/march-challenge</id>
   <content type="html">&lt;h2 id='big_ideas'&gt;Big Ideas&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Create an Open source load balancing API&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Basically a wrapper around HA proxy and your application that needs it.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Write a WebGL graphing library.&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Seems like the barrier to use WebGL could be lower.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Write a binary gem building system.&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In reference to Katz&amp;#8217;s speech at Ruby on Ales.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Small steps</title>
   <link href="http://chrislundquist.github.com/Development/2012/02/29/small-steps"/>
   <updated>2012-02-29T00:00:00-08:00</updated>
   <id>hhttp://chrislundquist.github.com/Development/2012/02/29/small-steps</id>
   <content type="html">&lt;p&gt;&lt;em&gt;Premature optimization and extension can cause many more problems than gains.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It is often the case where we try to extend or improve things before that are complete. This usually leads to the manifestation of many bugs. The root cause of this is &lt;em&gt;taking too many or too large of steps at a time&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;One way to tell when this is happening, is when you start writing many different functions at a time, but aren&amp;#8217;t able to finish any of them. My strategy here is to find the separation of concerns and establish the minimum amount of work I need to do to accomplish this step. The three C&amp;#8217;s of computer science can be an excellent guide.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Correctness&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Having a ugly function that works correctly, is better than a shorter one that has bugs.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Completeness&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;If you don&amp;#8217;t account for half of your cases, then it is an obvious bug.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Compactness&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;It is a fairly common saying, something isn&amp;#8217;t done when there is nothing left to add. It is done when there is nothing left to take away.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The order of these guidelines is very important. You first need to do something correctly before it is time to extend it all the way. Likewise, an empty function is very compact, but not complete.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Faking it</title>
   <link href="http://chrislundquist.github.com/Development/2012/02/28/faking-it"/>
   <updated>2012-02-28T00:00:00-08:00</updated>
   <id>hhttp://chrislundquist.github.com/Development/2012/02/28/faking-it</id>
   <content type="html">&lt;p&gt;&lt;em&gt;Faking it is the opposite of mastery. Faking it is learning (hopefully)&lt;/em&gt;&lt;/p&gt;

&lt;h3 id='what_it_is'&gt;What it is&lt;/h3&gt;

&lt;p&gt;Sometimes you find yourself learning a new framework, tool, or language. Usually the first while is spent reading, and trying to gain some clarity. Eventually you gain enough confidence to try to do your task, but expressing what you mean to the new tool can be difficult. Often you will &lt;em&gt;copy paste a similar section&lt;/em&gt; to what you want, using it as a template. Then you substitute your needs into the template, along the way fixing the minor errors that crop of from this process. Always with a clear goal, and gaining a little insight each time.&lt;/p&gt;

&lt;p&gt;Another common method is &lt;em&gt;to pattern after a familiar language&lt;/em&gt;. This is usually a better strategy, because it means you have more confidence in what you are actually doing. For example, when I was learning Java, patterning things after C++ let me cover more ground quickly. Since the syntax is so close, this can be a valid strategy, and even indicates a higher level of mastery than that of copy pasting a template and having at it.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Faking is not a bad thing. It is a great way to dive in and start to learn&lt;/em&gt;, it only becomes a problem when faking it becomes a crutch.&lt;/p&gt;

&lt;h3 id='how_to_tell_when_when_you_really_mean_it'&gt;How to tell when when you really mean it&lt;/h3&gt;

&lt;p&gt;Usually you can tell when you aren&amp;#8217;t faking it when you stop copy pasting from examples or when you aren&amp;#8217;t switching tabs constantly to copy someone else&amp;#8217;s code. There will always be times when you need a reference by running a quick search. This is distinctly different from switching back and forth between tabs or copy pasting large swaths of code.&lt;/p&gt;

&lt;p&gt;Most of all, mastery is apparent when you can &lt;em&gt;express your goal in a clear and succinct manor&lt;/em&gt; to or in your given tool or language, without needing a reference.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Panic Fire. How to recognize it and keep your coworkers from going postal</title>
   <link href="http://chrislundquist.github.com/Development/2012/02/27/panic-fire-how-to-recognize-it-and-keep-your-coworkers-from-going-postal"/>
   <updated>2012-02-27T00:00:00-08:00</updated>
   <id>hhttp://chrislundquist.github.com/Development/2012/02/27/panic-fire-how-to-recognize-it-and-keep-your-coworkers-from-going-postal</id>
   <content type="html">&lt;p&gt;So maybe you have found yourself or seen someone else in a situation like this.&lt;/p&gt;

&lt;p&gt;You are working on a project, without the time to get to know all the pieces. You are almost finished, there are just a few lines of code standing between you and getting lunch. There is just this one error you are stuck with. You try changing the problem line and get a wildly different error. Quickly, you change it again, to get another new error. You modify a few lines above with haste, hoping to stop the issue below, but that instead breaks in yet another new and interesting way.&lt;/p&gt;

&lt;p&gt;This cycle continues, ever so slowly bringing you closer to your goal. Finally, after repeatedly and hastily running back in forth reactively pushing lines of code &amp;#8220;back in place&amp;#8221;. You have completed the goal. You pause for a moment and look back over your code, not quite sure why half of it is there. You just remember it fixed some error that cropped up from this other error over there&amp;#8230; Actually you only have a vague idea how you accomplished this task. All you know is that it works now, some how.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This is panic fire&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Next time you see yourself or someone you know in this situation here are some suggestions to help them break the cycle.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ask what they are trying to accomplish.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If they can&amp;#8217;t say what they are trying to do in 20 words or less, they need to take smaller steps.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ask how they are going to accomplish the goal.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If they don&amp;#8217;t have a game plan in English, then it is really hard to express that plan in code. Even in a language as poetic as Ruby.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ask why making a change will bring them closer to their goal&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If they don&amp;#8217;t know why they are doing something, it is time to get a reality check&lt;/p&gt;

&lt;p&gt;To summarize, ask:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What are they doing&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;How they are going to do it&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Why it will work&lt;/em&gt;&lt;/p&gt;</content>
 </entry>
 
 
</feed>